#include <iostream>
#include <string>
#include <vector>
#include <array>

namespace ryu
{
    /*
    still to be implemented
    Parent, Child, Sibling, Ancestor, Descendant, Subtree,
    height, outputPacket, outputTree, empty, insert, Search,
    traversal, destructor
    */
    /*
    Generalization for trees
    */
    template <class T, int N = 0>
    class Tree
    {
        private:
            struct tree_node
            {
                T packet;
                std::array<tree_node*, N> children;
            };
            tree_node *head;
            
        public:
            Tree(T packet)
            {
                head = new tree_node();
                head->packet = packet;
            }
            T getData()
            {
                return head->packet;
            }
            int getSize()
            {
                return head->children.size();   
            }
    };
    
    /*
    Specialization for general trees
    */
    template<class T>
    class Tree <T, 0>
    {
        private:
            struct tree_node
            {
                T packet;
                std::vector<tree_node*> children;
            };
            tree_node *head;
            
        public:
            Tree(T packet)
            {
                head = new tree_node();
                head->packet = packet;   
            }
            T getData()
            {
                return head->packet;
            }
            int getSize()
            {
                return head->children.size();   
            }
    };
}

int main()
{
    ryu::Tree<std::string> tree("Hello");
    std::cout << tree.getData() << std::endl;
    std::cout << tree.getSize() << std::endl;
    return 0;
}