#include <iostream>

namespace ryu
{
    /*
    REMEMBER FORESTS
    TREE FORWARD_TREE?
    */
    
    /*
    Base Class for Generalized Tree
    */
    template <typename T, int D = 0, typename N = ryu::tree::i_node::impl<T>>
    class tree
    {
        typedef N node;
        typedef typename node::iterator iterator;
        typedef typename node::iterator::pre iterator::pre;
        typedef typename node::iterator::pst iterator::pst;
        typedef typename node::iterator::in iterator::in;
        typedef typename node::iterator::lvl iterator::lvl;
        
        private:
            node * root;
            
        public:
            //Default Constructor
            tree()
            {
                root = NULL;
                std::cout << "Allocated " << sizeof(node *) << " bytes of memory to ryu::tree" << std::endl;
            }
            //Alternate Constructor
            tree(T packet)
            {
                std::cout << "Allocated " << sizeof(node *) << " bytes of memory to ryu::tree" << std::endl;
                root = new node(packet);    
            }
            //Alternate Constructor
            tree(node * ptr)
            {
                root = ptr;
            }
            //Copy Constructor
            //tree(const tree &obj)
            //Destructor
            ~tree()
            {
                delete root;
                std::cout << "Freed " << sizeof(node *) << " bytes of memory from ryu::tree" << std::endl;
            }
            bool isEmpty()
            {
                return root;
            }
            //begin();
            //end();
            //int height()
            //{
            //    return height(root);
            //}
            //int size()
            //{
            //    return
            //}
            node * getRoot()
            {
                return root;   
            }
            //void output();
            //node * search();
            //void insert();
            //void modify();
            //void delete();
            
    };
}

int main()
{
    ryu::tree<int, 4> tree();
    //ryu::tree<int, 4>::iterator ptr = tree.begin();
    //std::cout << (*ptr).packet << std::endl;
    return 0;
}