what is a ryu::tree?
ryu::tree is a wrapper to a node pointer that points at the root of the tree
it must have a node type defined at ryu::tree::node
it must have an iterator type defined at ryu::tree::iterator
 

template <class T(packet type), int D = (size, 0 for dynamic), class N = (node impl)>
ryu::tree
base class for trees template creates a new tree instance for each call

ryu::tree::node
typedef for node implementation used AKA N from template
this way someone can call (name)::node to define a node or
node pointer without knowing the implementation

ryu::tree::iterator
typedef for node iterator implementation AKA node::iterator
non-instantiable iterator interface for tree methods which may want
to be performed with different types of iteration

ryu::tree::iterator::pre
preorder iterator

ryu::tree::iterator::pst

ryu::tree::iterator::in

ryu::tree::iterator::lvl

ryu::tree::i_node
interface for node implementations

ryu::tree::i_node::i_iterator
defined in same place as i_node
interface for node iterators

ryu::tree::i_node::(implementation name)
implementation of general node