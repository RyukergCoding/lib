
struct node
{
	int data;
	struct node *next;
}

//print
void Print(node *head)
{
	while(head)
   {
      std::cout << head->data << std::endl;
      head = head->next;
   }
}

//insert at end
node* Insert(node *head, int data)
{
    if(head)
    {
        node * tmp = head;
        while(tmp->next != NULL)
        {
            tmp = tmp->next;
        }
        tmp->next = new node();
        tmp->next->data = data;
    }
	 else
	 {
	 	  head = new node();
		  head->data = data;
	 }
    
    return head;
}

//insert at beginning
node* InsertBeg(node *head,int data)
{
    node * tmp = new node();
    tmp->data = data;
    tmp->next = head;
    
    return tmp;
}

//insert at a position
node* InsertNth(node *head, int data, int position)
{ 
    node * tmp;
    if(position == 0)
    {
        tmp = new node();
        tmp->data = data;
        tmp->next = head;
        head = tmp;
    }
    else
    {
        tmp = head;
        int i;
        for(i = 1; i < position; ++i)
            tmp = tmp->next;
        node * save = tmp->next;
        tmp->next = new node();
        tmp->next->data = data;
        tmp->next->next = save;
    }
    
    return head;
}

//deletes node at position
node* Delete(node *head, int position)
{
    // Complete this method
    node * tmp;
    if(position == 0)
    {
        tmp = head;
        head = head->next;
        delete tmp;
    }
    else
    {
        tmp = head;
        int i;
        for(i = 1; i < position; ++i)
            tmp = tmp->next;
        node * save = tmp->next;
        tmp->next = tmp->next->next;
        delete save;
    }
    
    return head;
}

//reverse print
void ReversePrint(node *head)
{ 
    if(head)
    {
        node * prev = NULL, *curr;
        while(head->next != prev)
        {
            curr = head->next;
            while(curr->next != prev)
            {
                curr = curr->next;
            }
            std::cout << curr->data << std::endl;
            prev = curr;
        }
        std::cout << head->data << std::endl;
    }
}


